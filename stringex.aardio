//stringex 常用文本库
namespace stringex

token = function(len){
	var a ="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
	return ..string.random(len, a)
}

lenb = function(str){
    str = ..string.toUnicode(str);
	var l = #str/2;
	for(i=1;l;1){
		if(str[i] > 0x7F) l++;
	}
	return l;
}

left = function(str, n){
	str = ..string.trim(str)
	var len = ..string.len(str)
	while(len > 0){
		var x = ..string.left(str, len, true)
		if(lenb(x) <= n) return ..string.trim(x);
		len --
	}
}

saveCsv = function(fileName, tab, cols){
	..string.save(fileName, '\xEF\xBB\xBF')
	if(cols) string.save(fileName, ..string.join(cols, ",")+'\r\n', true)
	for(i=1;#tab;1){
		..string.save(fileName, ..string.join(tab[i], ",")+'\r\n', true)
	}
	return fileName; 
}

//最长公共子串
lcs = function(s1, s2){
	var n1, n2 = ..string.len(s1), ..string.len(s2)
	var m = {} //建立矩阵
	for(i=1;n1+1;1){
		var t = {}
		for(j=1;n2+1;1){
			..table.push(t, 0)
		}
		..table.push(m, t)
	}
	
	var mmax, p = 0, 0
	for(i=1;n1;1){
		for(j=1;n2;1){
			var a, b = ..string.charAt(s1, i), ..string.charAt(s2, j)
			if(a == b){
				m[i+1][j+1] = m[i][j] + 1
				if(m[i+1][j+1] > mmax){
                    mmax = m[i+1][j+1]
                    p = i
                }
			}	
		}
	}
	return ..string.slice(s1, p-mmax+1, p, true); 
}


/**intellisense(stringex)
token() = 生成指定长度的随机字符串（0-9、大小写英文字母）
lenb(.(str) = 返回字符串的字节计数，每个中文占2个字节
left(.(str, n) = 自左向右截取字符串，以lenb字节长度计算
saveCsv(.(fileName, cols, tab) = 快速保存CSV文件到指定路径，文件名必填，表头数组可选指定。表格内容是一个二维数组。
lcs(.(s1, s2) = 输入2个字符串，返回其最长公共子串，未匹配则返回空字符串

end intellisense**/
